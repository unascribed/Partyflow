plugins {
	id 'java'
	id 'eclipse'
	id 'org.cadixdev.licenser' version '0.6.1'
	id 'com.github.ben-manes.versions' version '0.50.0'
}

repositories {
	mavenCentral()
	maven {
		url 'https://repo.unascribed.com'
	}
}

sourceCompatibility = 17
targetCompatibility = 17

archivesBaseName = 'Partyflow'

dependencies {
	implementation 'org.eclipse.jetty:jetty-server:11.0.19'
	implementation 'org.apache.jclouds:jclouds-blobstore:2.5.0'
	implementation 'org.apache.jclouds.driver:jclouds-slf4j:2.5.0'
	
	implementation 'blue.endless:jankson:1.2.3'
	implementation 'com.google.guava:guava:33.0.0-jre'
	implementation 'com.github.spullara.mustache.java:compiler:0.9.11'
	implementation('org.slf4j:slf4j-api') {
		version {
			strictly '1.7.36'
		}
	}
	implementation 'com.unascribed:asyncsimplelog:4.6.1'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.4'
	implementation 'org.jsoup:jsoup:1.17.2'
	implementation 'org.commonmark:commonmark:0.21.0'
	implementation 'org.slf4j:jcl-over-slf4j:1.7.36'
	implementation 'org.apache.commons:commons-jexl3:3.3'
	
	// Storage drivers
	implementation 'org.apache.jclouds.api:filesystem:2.5.0'
	implementation 'org.apache.jclouds.api:s3:2.5.0'
	
	// Database drivers
	implementation 'com.h2database:h2:2.2.224'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.2'
}

jar {
	sourceSets.main.runtimeClasspath.each {
		if (it.isFile()) {
			from(zipTree(it)) {
				exclude 'META-INF/NOTICE*'
				exclude 'META-INF/CHANGES'
				exclude 'META-INF/DEPENDENCIES'
				exclude 'META-INF/README*'
				exclude 'META-INF/LICENSE*'
				exclude 'META-INF/mailcap.default'
				exclude '/module-info.class'
			}
		}
	}
	from 'LICENSE'
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	
	manifest.attributes (
		'Main-Class': 'com.unascribed.partyflow.Partyflow',
		'Implementation-Version': java.security.SecureRandom.getSeed(16).encodeHex()
	)
}

license {
	matching('**/com/unascribed/random/**') {
		header = file('headers/cc0.txt')
	}
	matching('**/com/lambdaworks/**') {
		header = file('headers/scrypt.txt')
	}
	matching('**/com/overzealous/**') {
		header = file('headers/remark.txt')
	}
	matching('**/blue/endless/jankson/**') {
		header = file('headers/jankson.txt')
	}
	matching('**/io/github/martincameron/ibxm2/**') {
		header = file('headers/ibxm2.txt')
	}
	header = file('headers/partyflow.txt')
	
	include '**/*.java'
	exclude '**/com/unascribed/partyflow/logic/permission/Permission.java' //autogen'd file
}

compileJava {
	options.compilerArgs += "-parameters"
}

import com.unascribed.partyflow.TweakableGZIPOutputStream

task sourceZip(type: Zip) {
	dependsOn processResources
	destinationDirectory = file('build/resources/main/static')
	archiveBaseName = 'quine'
	reproducibleFileOrder = true
	entryCompression = 'stored'
	file('.gitignore').eachLine {
		if (!it.startsWith("#")) exclude(it)
	}
	exclude '.git'
	from(file('.')) {}
}

task precompressStaticResources {
	dependsOn sourceZip
	doLast {
		def files = [file('build/resources/main/static')]
		def nextFiles = []
		while (!files.empty) {
			for (def infile : files) {
				if (infile.directory) {
					for (def child : infile.listFiles()) {
						nextFiles.add(child)
					}
				} else if (!infile.getName().endsWith(".png")) {
					def outfile = new File(infile.toString()+".gz")
					infile.withInputStream { in ->
						outfile.withOutputStream { out ->
							new TweakableGZIPOutputStream(out).level(9).withCloseable { cout ->
								in.transferTo(cout)
							}
						}
					}
					infile.delete()
				}
			}
			files.clear()
			files.addAll(nextFiles)
			nextFiles.clear()
		}
	}
}

jar.dependsOn precompressStaticResources

processResources.finalizedBy precompressStaticResources

tasks.named("dependencyUpdates").configure {
	gradleReleaseChannel = 'current'
	revision = 'release'
	rejectVersionIf {
		it.candidate.version.contains("alpha") || it.candidate.version.contains("beta")
			|| (it.candidate.group == 'org.slf4j' && it.candidate.version.startsWith("2."))
			|| (it.candidate.group == 'org.eclipse.jetty' && it.candidate.version.startsWith("12."))
	}
}
