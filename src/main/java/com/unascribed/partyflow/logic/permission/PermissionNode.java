/*
 * This file is part of Partyflow.
 *
 * Partyflow is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Partyflow is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with Partyflow.
 *
 * If not, see <https://www.gnu.org/licenses/>.
 */

package com.unascribed.partyflow.logic.permission;

import java.util.Arrays;
import java.util.Locale;

import com.google.common.collect.ImmutableList;

public enum PermissionNode {
	ADMIN$ADMINISTRATE("Allow modifying the behavior of the Partyflow instance itself."),
	
	MODERATE$BYPASS_OWNERSHIP("Allow other permissions to apply to releases other than the user's own."),
	
	RELEASE$CREATE("Allow creation of new releases."),
	RELEASE$DELETE("Allow deletion of a user's own releases."),
	
	RELEASE$TRACK$ADD("Allow addition of new tracks to a user's own releases.")
	;

	public static final ImmutableList<PermissionNode> VALUES = ImmutableList.copyOf(values());
	
	private final String node, description;
	final String[] parts;
	
	PermissionNode(String description) {
		this.node = name().toLowerCase(Locale.ROOT).replace('$', '.').replace('_', '_');
		this.parts = node.split("\\.");
		this.description = description;
	}
	
	public String description() {
		return description;
	}
	
	@Override
	public String toString() {
		return node;
	}
	
	public static void main(String[] args) {
		String[] prefix = {};
		System.out.println("package com.unascribed.partyflow.logic.permission;");
		System.out.println();
		System.out.println("/* AUTOGENERATED - DO NOT EDIT */");
		System.out.println("public final class Permission {");
		System.out.println("\tprivate Permission() {}");
		for (var p : values()) {
			if (!Arrays.equals(prefix, Arrays.copyOf(p.parts, p.parts.length-1))) {
				int oldlen = prefix.length;
				prefix = Arrays.copyOf(p.parts, p.parts.length-1);
				if (oldlen >= prefix.length) {
					for (int i = 0; i <= oldlen-prefix.length; i++) {
						System.out.println(("\t".repeat(oldlen-i))+"}");
					}
				}
				System.out.println();
				System.out.println(("\t".repeat(prefix.length))+"public static final class "+prefix[prefix.length-1]+" {");
				System.out.println(("\t".repeat(prefix.length+1))+"private "+prefix[prefix.length-1]+"() {}");
				System.out.println();
			}
			System.out.println(("\t".repeat(prefix.length+1))+"/** "+p.description()+" */");
			System.out.println(("\t".repeat(prefix.length+1))+"public static final PermissionNode "+p.parts[p.parts.length-1]+" = PermissionNode."+p.name()+";");
		}
		for (int i = 0; i < prefix.length; i++)
			System.out.println(("\t".repeat(prefix.length-i))+"}");
		System.out.println("}");
	}

	
}
