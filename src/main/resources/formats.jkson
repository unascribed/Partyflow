/*
 * This is the Partyflow formats definition file. Everything related to the
 * formats offered for download and streaming is all laid bare here.
 *
 * Overriding this file is an ADVANCED FEATURE and should be USED WITH CAUTION.
 * 
 * WARNING: There are many places in Partyflow documentation and strings that
 * assume the default formats. Making large changes here will result in those
 * becoming incorrect, and may result in the laws of reality breaking down.
 */

@defs {
	replaygain {
		formatRGGain: ((i) -> {string:format('%.2f dB', (-18 - i))})
		formatR128Gain: ((i) -> {string:format('%.0f', math:max(-32768, math:min(32767, math:floor((-23 - i) * 256))))})
		formatRGPeak: ((i) -> {string:format('%.6f', math:pow(10, i / 20))})
		generic {
			REPLAYGAIN_ALBUM_PEAK: (formatRGPeak(albumPeak))
			REPLAYGAIN_TRACK_PEAK: (formatRGPeak(trackPeak))
			REPLAYGAIN_ALBUM_GAIN: (formatRGGain(albumLoudness))
			REPLAYGAIN_TRACK_GAIN: (formatRGGain(trackLoudness))
		}
		opus {
			REPLAYGAIN_ALBUM_PEAK: (formatRGPeak(albumPeak))
			REPLAYGAIN_TRACK_PEAK: (formatRGPeak(trackPeak))
			REPLAYGAIN_ALBUM_GAIN: (formatRGGain(albumLoudness))
			REPLAYGAIN_TRACK_GAIN: (formatRGGain(trackLoudness))
			R128_TRACK_GAIN: (formatR128Gain(trackLoudness))
			R128_ALBUM_GAIN: (formatR128Gain(albumLoudness))
		}
	}
	suggestWhen {
		isApple: ((s) -> { s.contains('Macintosh') || s.contains('iPhone') || s.contains('iPad') })
		isAndroid: ((s) -> { !isWindows(s) && s.contains('Android') })
		isLinux: ((s) -> { !isAndroid(s) && s.contains('Linux') })
		isWindows: ((s) -> { s.contains('Windows') })
		androidVersion: ((s) -> {
			var m = ~/Android ([0-9]+)/.matcher(s);
			var v = m.find() ? int:parseInt(m.group(1)) : 0;
			return v;
		})
	}
	availableWhen {
		uncompressed: (config.formats.allowUncompressedFormats)
		lossless: (config.formats.allowLosslessFormats)
		mp3: (config.formats.allowMP3)
		encumbered: (config.formats.allowEncumberedFormats)
	}
	sizeEstimate {
		kbps: ((i) -> { durationSecs*(i*125) })
	}
}

// Formats exposed directly to users when downloading a file.
// The name is what users will see.
// suggestWhen, availableWhen, sizeEstimate, and replaygain values are all JEXL expressions.
// https://commons.apache.org/proper/commons-jexl/reference/index.html
download {
	flac {
		name: "FLAC"
		description: "The most popular lossless format"
		ytdlPriority: 99999
		icon: "flac.svg"
		ext: "flac"
		type: "audio/flac"
		args: <-f flac -codec:a flac>
		lossless: true
		suggestWhen: (true)
		availableWhen: (lossless)
		sizeEstimate: (master)
		replaygain: (generic)
	}
	alac {
		name: "Apple Lossless"
		description: "Apple iTunes lossless format"
		ytdlPriority: 99998
		icon: "alac.svg"
		ext: "m4a"
		type: "audio/x-m4a; codecs=alac"
		args: <-f ipod -codec:a alac -movflags +faststart>
		lossless: true
		suggestWhen: (isApple(userAgent))
		availableWhen: (lossless)
		sizeEstimate: (master * 1.02)
		replaygain: (generic)
	}
	ogg-opus-128 {
		name: "Opus"
		description: "Most efficient format, needs recent players/OS"
		ytdlPriority: 1280
		icon: "opus.svg"
		ext: "opus"
		type: "audio/ogg; codecs=opus"
		args: <-f ogg -codec:a libopus -b:a 128k>
		suggestWhen: (isAndroid(userAgent) ? androidVersion(userAgent) >= 10 : isLinux(userAgent))
		availableWhen: (true)
		sizeEstimate: (kbps(128))
		replaygain: (opus)
	}
	ogg-vorbis-192 {
		name: "Ogg Vorbis"
		description: "Common free format on Android/Linux"
		ytdlPriority: 192
		icon: "vorbis.svg"
		ext: "ogg"
		type: "audio/ogg; codecs=vorbis"
		args: <-f ogg -codec:a libvorbis -q:a 6>
		suggestWhen: (isLinux(userAgent) || isAndroid(userAgent))
		availableWhen: (true)
		sizeEstimate: (kbps(192))
		replaygain: (generic)
	}
	aac-vbr@ffmpeg {
		name: "AAC"
		description: "Common format on iOS/macOS"
		ytdlPriority: 128
		icon: "aac.svg"
		ext: "m4a"
		type: "audio/x-m4a; codecs=mp4a.40.2"
		args: <-f ipod '-codec:a libfdk_aac' -vbr:a 5 -movflags +faststart>
		suggestWhen: (isApple(userAgent))
		availableWhen: (encumbered && config.formats.aacMode == "ffmpeg-fdk")
		sizeEstimate: (kbps(192))
		replaygain: (generic)
	}
	aac-vbr@fdkaac {
		name: "AAC"
		description: "Common format on iOS/macOS"
		ytdlPriority: 128
		icon: "aac.svg"
		ext: "m4a"
		type: "audio/x-m4a; codecs=mp4a.40.2"
		altcmd: "fdkaac"
		altcmdargs: <-m 5 -f 2 - -o ->
		args: <-f ipod -codec:a copy -movflags +faststart>
		suggestWhen: (isApple(userAgent))
		availableWhen: (encumbered && config.formats.aacMode == "fdkaac")
		sizeEstimate: (kbps(192))
		replaygain: (generic)
	}
	aac-vbr@qaac {
		name: "AAC"
		description: "Common format on iOS/macOS"
		ytdlPriority: 128
		icon: "aac.svg"
		ext: "m4a"
		type: "audio/x-m4a; codecs=mp4a.40.2"
		altcmd: "qaac"
		altcmdargs: <--adts -q 1 - -o ->
		args: <-f ipod -codec:a copy -movflags +faststart>
		suggestWhen: (isApple(userAgent))
		availableWhen: (encumbered && config.formats.aacMode == "qaac")
		sizeEstimate: (kbps(160))
		replaygain: (generic)
	}
	mp3-v1 {
		name: "MP3 V1"
		description: "Highly compatible and fairly efficient"
		ytdlPriority: 321
		icon: "mp3.svg"
		ext: "mp3"
		type: "audio/mpeg; codecs=mp3"
		args: <-f mp3 -id3v2_version 3 -codec:a libmp3lame -q:a 1>
		suggestWhen: (true)
		availableWhen: (mp3)
		sizeEstimate: (kbps(220))
		replaygain: (generic)
	}
	// I would make this 256 or so, but "320" is a magic Good Number to some.
	// people who care should be getting MP3 V1 already
	mp3-320 {
		name: "MP3 320"
		description: "Plays just about anywhere, but inefficient"
		ytdlPriority: 320
		icon: "mp3.svg"
		ext: "mp3"
		type: "audio/mpeg; codecs=mp3"
		args: <-f mp3 -codec:a libmp3lame -b:a 320k>
		suggestWhen: (true)
		availableWhen: (mp3)
		sizeEstimate: (kbps(320))
		replaygain: (generic)
	}
	wav {
		name: "WAV"
		description: "Standard raw audio data - very large, prefer FLAC"
		ytdlPriority: 999
		icon: "wav.svg"
		ext: "wav"
		type: "audio/wav"
		args: <-vn -f wav>
		lossless: true
		uncompressed: true
		suggestWhen: (false)
		// uncompressed audio is trivial to create and is a waste of space to cache
		cache: false
		direct: true
		availableWhen: (uncompressed)
		sizeEstimate: (durationSamples * 2 * 2)
	}
	aiff {
		name: "AIFF"
		description: "Alternative raw audio data - very large, prefer FLAC"
		ytdlPriority: 998
		icon: "wav.svg"
		ext: "aiff"
		type: "audio/aiff"
		args: <-vn -f aiff>
		lossless: true
		uncompressed: true
		suggestWhen: (false)
		cache: false
		direct: true
		availableWhen: (uncompressed)
		sizeEstimate: (durationSamples * 2 * 2)
	}
}

// Internal formats used for streaming on release/track pages. Name not used and does not need to be
// specified.
stream {
	webm-opus-72 {
		ytdlPriority: 4
		ext: "webm"
		type: "audio/webm; codecs=opus"
		args: <-f webm -codec:a libopus -b:a 72k>
		direct: true
		availableWhen: (true)
		sizeEstimate: (kbps(72))
	}
	mp4-aac-88@ffmpeg {
		ytdlPriority: 3
		ext: "mp4"
		type: "audio/mp4; codecs=mp4a.40.2"
		args: <-f mp4 -codec:a libfdk_aac -b:a 88k -cutoff 18k>
		direct: false // MP4 muxer can't stream
		availableWhen: (encumbered && config.formats.aacMode == "ffmpeg-fdk")
		sizeEstimate: (kbps(88))
	}
	mp4-aac-88@fdkaac {
		ytdlPriority: 3
		ext: "mp4"
		type: "audio/mp4; codecs=mp4a.40.2"
		altcmd: "fdkaac"
		altcmdargs: <-b 88 -f 2 - -o ->
		args: <-f mp4 -codec:a copy>
		direct: false
		availableWhen: (encumbered && config.formats.aacMode == "fdkaac")
		sizeEstimate: (kbps(88))
	}
	mp4-aac-88@qaac {
		ytdlPriority: 3
		ext: "mp4"
		type: "audio/mp4; codecs=mp4a.40.2"
		altcmd: "qaac"
		altcmdargs: <--adts -v 88 - -o ->
		args: <-f mp4 -codec:a copy>
		direct: false
		availableWhen: (encumbered && config.formats.aacMode == "qaac")
		sizeEstimate: (kbps(88))
	}
	ogg-vorbis-96 {
		ytdlPriority: 2
		ext: "ogg"
		type: "audio/ogg; codecs=vorbis"
		args: <-f ogg -codec:a libvorbis -q:a 2>
		direct: true
		availableWhen: (true)
		sizeEstimate: (kbps(96))
	}
	mp3-112 {
		ytdlPriority: 1
		ext: "mp3"
		// specifying codecs=mp3 is technically redundant, but makes browsers happy
		type: "audio/mpeg; codecs=mp3"
		args: <-f mp3 -codec:a libmp3lame -b:a 112k>
		direct: true
		availableWhen: (true)
		sizeEstimate: (kbps(112))
	}
}

// Extra-low-quality stream formats that can be enabled at the discretion of the server admin.
stream_low {
	webm-opus-48 {
		ytdlPriority: 4
		ext: "webm"
		type: "audio/webm; codecs=opus"
		args: <-f webm -codec:a libopus -b:a 48k>
		direct: true
		availableWhen: (true)
		sizeEstimate: (kbps(48))
	}
	ogg-vorbis-64 {
		ytdlPriority: 2
		ext: "ogg"
		type: "audio/ogg; codecs=vorbis"
		args: <-f ogg -codec:a libvorbis -q:a 0>
		direct: true
		availableWhen: (true)
		sizeEstimate: (kbps(64))
	}
	mp3-96 {
		ytdlPriority: 1
		ext: "mp3"
		type: "audio/mpeg; codecs=mp3"
		args: <-f mp3 -codec:a libmp3lame -b:a 96k>
		direct: true
		availableWhen: (mp3)
		sizeEstimate: (kbps(96))
	}
}

// kate: hl c
// vi: set ft=c
// -*- mode: c -*-